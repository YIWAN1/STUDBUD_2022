/*!
 * parcel-plugin-template 2.4.1 (https://github.com/yanhaijing/parcel-plugin-template)
 * API https://github.com/yanhaijing/parcel-plugin-template/blob/master/doc/api.md
 * Copyright 2017-2020 yanhaijing. All Rights Reserved
 * Licensed under MIT (https://github.com/yanhaijing/parcel-plugin-template/blob/master/LICENSE)
 */

'use strict';

var precompiler = require('@templatejs/precompiler');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const path = require('path');
const fs = require('fs');
const HTMLAsset = require('parcel-bundler/src/Asset');
class TmplAsset extends HTMLAsset {
    constructor(name, options) {
        super(name, options);
        this.type = 'js';
        this.templateOption = { tplName: this.basename, expression: 'require("@templatejs/runtime").default' };
        const filepath = path.resolve(options.rootDir, 'template.config.json');
        if (fs.existsSync(filepath)) {
            const obj = require(filepath);
            this.templateOption = Object.assign(this.templateOption, obj);
        }
    }
    parse(code) {
        return precompiler.precompile(code, this.templateOption);
    }
    generate() {
        return __awaiter(this, void 0, void 0, function* () {
            return `module.exports = ${this.ast}`;
        });
    }
}
module.exports = TmplAsset;
