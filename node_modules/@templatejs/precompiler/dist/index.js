/*!
 * @templatejs/precompiler 2.4.1 (https://github.com/templatejs/precompiler)
 * API https://github.com/templatejs/precompiler/blob/master/doc/api.md
 * Copyright 2017-2020 templatejs. All Rights Reserved
 * Licensed under MIT (https://github.com/templatejs/precompiler/blob/master/LICENSE)
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var parser = require('@templatejs/parser');
var extend = require('@jsmini/extend');
var esprima = require('esprima');
var estraverse = require('estraverse');

function getIdentifierName(node) {
    return node && node.name;
}
function getAssignmentPatternName(node) {
    if (node.left.type === esprima.Syntax.Identifier) {
        return [getIdentifierName(node.left)];
    }
    if (node.left.type === esprima.Syntax.ArrayPattern) {
        return getArrayPatternName(node.left);
    }
    if (node.left.type === esprima.Syntax.ObjectPattern) {
        return getObjectPatternName(node.left);
    }
}
function getRestElementName(node) {
    if (node.argument.type === esprima.Syntax.Identifier) {
        return [getIdentifierName(node.argument)];
    }
    if (node.argument.type === esprima.Syntax.ArrayPattern) {
        return getArrayPatternName(node.argument);
    }
    if (node.argument.type === esprima.Syntax.ObjectPattern) {
        return getObjectPatternName(node.argument);
    }
}
function getArrayPatternName(node) {
    return node.elements.reduce(function (prev, element) {
        if (element.type === esprima.Syntax.Identifier) {
            return prev.concat(getIdentifierName(element));
        }
        if (element.type === esprima.Syntax.AssignmentPattern) {
            return prev.concat(getAssignmentPatternName(element));
        }
        if (element.type === esprima.Syntax.ArrayPattern) {
            return prev.concat(getArrayPatternName(element));
        }
        if (element.type === esprima.Syntax.ObjectPattern) {
            return prev.concat(getObjectPatternName(element));
        }
        if (element.type === esprima.Syntax.RestElement) {
            return prev.concat(getRestElementName(element));
        }
    }, []);
}
function getObjectPatternName(node) {
    return node.properties.reduce(function (prev, property) {
        var value = property.value;
        if (value.type === esprima.Syntax.Identifier) {
            return prev.concat(getIdentifierName(value));
        }
        if (value.type === esprima.Syntax.AssignmentPattern) {
            return prev.concat(getAssignmentPatternName(value));
        }
        if (value.type === esprima.Syntax.ArrayPattern) {
            return prev.concat(getArrayPatternName(value));
        }
        if (value.type === esprima.Syntax.ObjectPattern) {
            return prev.concat(getObjectPatternName(value));
        }
    }, []);
}
function getVariableDeclaratorName(node) {
    var id = node.id;
    if (id.type === esprima.Syntax.Identifier) {
        return [getIdentifierName(id)];
    }
    if (id.type === esprima.Syntax.ArrayPattern) {
        return getArrayPatternName(id);
    }
    if (id.type === esprima.Syntax.ObjectPattern) {
        return getObjectPatternName(id);
    }
    /* istanbul ignore next */
    return [];
}
function getParamsName(params) {
    return params.reduce(function (prev, param) {
        if (param.type === esprima.Syntax.Identifier) {
            return prev.concat(getIdentifierName(param));
        }
        if (param.type === esprima.Syntax.AssignmentPattern) {
            return prev.concat(getAssignmentPatternName(param));
        }
        if (param.type === esprima.Syntax.ArrayPattern) {
            return prev.concat(getArrayPatternName(param));
        }
        if (param.type === esprima.Syntax.ObjectPattern) {
            return prev.concat(getObjectPatternName(param));
        }
        if (param.type === esprima.Syntax.RestElement) {
            return prev.concat(getRestElementName(param));
        }
    }, []);
}
function inContextStack(cs, name) {
    var i = cs.length;
    while (i--) {
        if (cs[i].varList.indexOf(name) !== -1) {
            return true;
        }
    }
    return false;
}
function hasContext(type) {
    return [
        esprima.Syntax.ArrowFunctionExpression,
        esprima.Syntax.FunctionDeclaration,
        esprima.Syntax.FunctionExpression,
        esprima.Syntax.ForStatement,
        esprima.Syntax.ForInStatement,
        esprima.Syntax.ForOfStatement,
        esprima.Syntax.BlockStatement,
    ].indexOf(type) !== -1;
}
var defaultOpt = {
    compress: false,
    expression: 'template',
    tplName: 'unknown.tpl',
    sandbox: false,
};
function detectVar(code) {
    var ast = esprima.parseScript(code);
    // hasContext()
    // { type: '', varList: [] }
    var contextStack = [{
            type: 'template',
            varList: ['__code__', '__encodeHTML__', '__modifierMap__', '__runtime__'],
        }, {
            type: 'root',
            varList: [],
        }];
    var unVarList = [];
    estraverse.traverse(ast, {
        enter: function (node, parent) {
            var type = node.type;
            var currentContext = contextStack[contextStack.length - 1];
            if (hasContext(type)) {
                currentContext = {
                    type: type,
                    varList: []
                };
                contextStack.push(currentContext);
                if ([
                    esprima.Syntax.ArrowFunctionExpression,
                    esprima.Syntax.FunctionDeclaration,
                    esprima.Syntax.FunctionExpression
                ].indexOf(type) !== -1) {
                    // 放入函数名字
                    // @ts-ignore
                    if (node.id) {
                        // @ts-ignore
                        currentContext.varList.push(getIdentifierName(node.id));
                    }
                    // @ts-ignore
                    currentContext.varList = currentContext.varList.concat(getParamsName(node.params));
                }
            }
            else if (type === esprima.Syntax.VariableDeclarator) {
                currentContext.varList = currentContext.varList.concat(getVariableDeclaratorName(node));
            }
            else if (type === esprima.Syntax.Identifier) {
                // todo check 是否在 context stack
                // @ts-ignore
                if (inContextStack(contextStack, node.name)) {
                    return;
                }
                // a.b b return
                if (parent.type === esprima.Syntax.MemberExpression && parent.object !== node) {
                    return;
                }
                var name_1 = getIdentifierName(node);
                if (unVarList.indexOf(name_1) === -1) {
                    unVarList.push(name_1);
                }
            }
        },
        leave: function (node) {
            if (hasContext(node.type)) {
                contextStack.pop();
            }
        }
    });
    return unVarList;
}
function generateVarCode(nameList, sandbox) {
    function genExpression(objStr, keyStr) {
        return "__hasOwnProp__.call(" + objStr + ", '" + keyStr + "') ? " + objStr + "['" + keyStr + "']";
    }
    if (sandbox) {
        return nameList.map(function (name) { return "    var " + name + " = " + genExpression('__data__', name) + " : " + genExpression('__runtime__.functionMap', name) + " : undefined;"; }).join('\n');
    }
    return nameList.map(function (name) { return "    var " + name + " = " + genExpression('__data__', name) + " : " + genExpression('__runtime__.functionMap', name) + " : " + genExpression('__root__', name) + " : undefined;"; }).join('\n');
}
/* istanbul ignore next */
function precompile(tpl, opt) {
    if (opt === void 0) { opt = defaultOpt; }
    var code = parser.parse(tpl, opt);
    var _a = extend.extendDeep({}, defaultOpt, opt), expression = _a.expression, compress = _a.compress, tplName = _a.tplName, sandbox = _a.sandbox;
    var unVarList = detectVar(code);
    /* eslint-disable indent, @typescript-eslint/indent */
    var source = "\nfunction render(__data__) {\n    var __runtime__ = " + expression + ";\n    var __root__ = (typeof self === 'object' && self.self === self && self) ||\n        (typeof global === 'object' && global.global === global && global) ||\n        this;\n    var __hasOwnProp__ = ({}).hasOwnProperty;\n\n    " + generateVarCode(unVarList, sandbox) + "\n    \n    try {\n        var __code__ = '';\n        var __modifierMap__ = __runtime__.modifierMap;\n\n        " + code + "\n\n        return " + (compress ? '__runtime__.compress(__code__)' : '__code__') + ";\n    } catch(e) {\n        e.name = 'RenderError';\n        e.tpl = '" + tplName + "';\n        __runtime__.handelError(e);\n        return 'template.js error';\n    }\n}";
    return source;
}

exports.detectVar = detectVar;
exports.generateVarCode = generateVarCode;
exports.precompile = precompile;
